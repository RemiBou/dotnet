@using StackExchange.Profiling
@using System.IO
@using StackExchange.Profiling.Internal
@inject HttpClient Http
@inject IJSRuntime jsRuntime
@inject BlazorProfilerProvider BlazorProfilerProvider;
@inject MiniProfilerJsInterop MiniProfilerJsInterop;
<div id="mini-profiler" data-ids="" data-authorized="true" data-position="right" data-controls="true" data-version="@MiniProfilerBaseOptions.Version"></div>
<script type="text/javascript" suppress-error="BL9992">@js</script>
<style type="text/css">@css 
.mp-blazor{
    right:150px;
}
.mp-blazor .mp-button{
    border: solid 0.5px #ababab;
    border-top-width: 0px;
}</style>
<div class="mp-blazor mp-results mp-result">
    <div class="mp-button">
    @if(MiniProfiler.Current != null)
    {
        <span @onclick="Stop">stop</span>
    } else {
        <span @onclick="Start">start</span>
    }</div>
</div>

@code {
    private string js = "";
    private string css;
    protected async Task Stop(){
        
        await MiniProfiler.Current.StopAsync();
    }
    protected async Task Start(){
        MiniProfiler.DefaultOptions.StartProfiler();
    }
    protected override async Task OnInitializedAsync(){
        MiniProfiler.DefaultOptions.StartProfiler();
        var assembly = typeof(MiniProfiler).Assembly;
        using(MiniProfiler.Current.Step("Blazor MiniProfiler : CSS Loading"))
        {
            using (var stream = assembly.GetManifestResourceStream("StackExchange.Profiling.ui.includes.min.css"))                    
            using (var reader = new StreamReader(stream))
            {
                css += await reader.ReadToEndAsync();
            }
        }
        using(MiniProfiler.Current.Step("Blazor MiniProfiler : JS Loading"))
        {
            using (var stream = assembly.GetManifestResourceStream("StackExchange.Profiling.ui.includes.min.js"))                    
            using (var reader = new StreamReader(stream))
            {
                js += await reader.ReadToEndAsync();
                //await jsRuntime.InvokeVoidAsync("eval", js);
            }
        }
        
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(!firstRender){
            return;
        }
        BlazorProfilerProvider.OnProfilerStopped += (target,miniProfiler) => {
            Console.WriteLine("OnProfilerStopped"+miniProfiler.Id);
            MiniProfilerJsInterop.RenderProfiler(miniProfiler).ContinueWith((t) => {});
            this.StateHasChanged();
        };
        
    }

}