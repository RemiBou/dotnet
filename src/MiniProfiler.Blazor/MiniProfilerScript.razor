@using StackExchange.Profiling
@using System.IO
@using StackExchange.Profiling.Internal
@using  Newtonsoft.Json
@using Newtonsoft.Json.Serialization
@inject HttpClient Http
@inject IJSRuntime jsRuntime
@inject MiniProfilerJsInterop miniProfilerJsInterop;
<div id="mini-profiler" data-ids="" data-authorized="true" data-position="left" data-controls="true" data-version="@MiniProfilerBaseOptions.Version"></div>
<style type="text/css">@css</style>
@code{
    private string js = "";
    private string css;
    protected override async Task OnInitializedAsync(){
        using (var stream = typeof(MiniProfiler).Assembly.GetManifestResourceStream("StackExchange.Profiling.ui.includes.min.css"))                    
        using (var reader = new StreamReader(stream))
        {
            css += await reader.ReadToEndAsync();
        }
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(!firstRender){
            return;
        }
        
        var miniProf = MiniProfiler.DefaultOptions.StartProfiler();
        using(miniProf.Step("load css"))
        {
            using (var stream = typeof(MiniProfiler).Assembly.GetManifestResourceStream("StackExchange.Profiling.ui.includes.min.js"))                    
            using (var reader = new StreamReader(stream))
            {
                js += await reader.ReadToEndAsync();
                await jsRuntime.InvokeVoidAsync("eval", js);
            }
        }
       
        await miniProf.StopAsync();
        await miniProfilerJsInterop.RenderProfiler(miniProf);
    }

    public class MiniProfilerDefaultContractResolver : DefaultContractResolver
    {
        public MiniProfilerDefaultContractResolver()
        {
        }
        
        protected override IList<JsonProperty> CreateProperties(Type type, MemberSerialization memberSerialization)
        {
            IList<JsonProperty> properties = base.CreateProperties(type, memberSerialization);
        
            // only serializer properties that start with the specified character
            properties = properties.Where(p => p.PropertyName != "Options").ToList();
        
            return properties;
        }
    }

}